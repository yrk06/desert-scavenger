[gd_resource type="ShaderMaterial" load_steps=8 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;

uniform vec4 W_Color: hint_color;

uniform sampler2D Noise1;
uniform sampler2D Noise2;
uniform sampler2D FoamNoise;
uniform float displace_scale = 0.1;
uniform vec2 Speed1 = vec2(1.0);
uniform vec2 Speed2 = vec2(1.0);
uniform vec2 Scale1 = vec2(1.0);
uniform vec2 Scale2 = vec2(1.0);
uniform vec2 FoamNoiseScale = vec2(1.0);
uniform vec2 FoamNoiseSpeed = vec2(1.0);
uniform float FoamBias;
varying vec3 v_pos;

float height(vec2 coord, float time)
{
	float y = texture(Noise1,coord*Scale1+Speed1*time).r;
	y += texture(Noise2,coord*Scale2+Speed2*time).r;
	return y * displace_scale/2.0;
	
}
void vertex()
{
	vec2 coord = VERTEX.xz;
	float H = height(coord,TIME);
	VERTEX.y = H;
	
	NORMAL = vec3(H - height(coord+vec2(0.1,0.0),TIME),0.1,H- height(coord+vec2(0.0,1.0),TIME));
	v_pos = VERTEX;
}
void fragment()
{
	float depth = textureLod(DEPTH_TEXTURE, SCREEN_UV, 0.0).r;
	vec4 upos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV * 2.0 - 1.0, depth * 2.0 - 1.0, 1.0);
	vec3 pixel_position = upos.xyz / upos.w;
	
	float fresnel = sqrt(1.0 - dot(NORMAL, VIEW));
	ROUGHNESS = 0.01 * (1.0 - fresnel);
	METALLIC = 0.0;
	RIM = 0.2;
	float foam = clamp(smoothstep(pixel_position.z+1.0,pixel_position.z,VERTEX.z),0.0,1.0);
	ALBEDO = W_Color.rgb;
	if(foam > FoamBias)
	{
		float f = (foam - FoamBias)/(1.0-FoamBias);
		vec3 FColor = f * floor(texture(FoamNoise,v_pos.xz*FoamNoiseScale+0.5*sin(TIME*FoamNoiseSpeed)).rgb*2.0)/2.0;
		ALBEDO += clamp(FColor,vec3(0.0),vec3(1.0))
		
		
	}
	
	
	
	
	
}"

[sub_resource type="OpenSimplexNoise" id=6]

[sub_resource type="NoiseTexture" id=7]
seamless = true
noise = SubResource( 6 )

[sub_resource type="OpenSimplexNoise" id=2]

[sub_resource type="NoiseTexture" id=3]
seamless = true
noise = SubResource( 2 )

[sub_resource type="OpenSimplexNoise" id=4]

[sub_resource type="NoiseTexture" id=5]
seamless = true
noise = SubResource( 4 )

[resource]
shader = SubResource( 1 )
shader_param/W_Color = Color( 0.113725, 0.211765, 0.427451, 1 )
shader_param/displace_scale = 0.1
shader_param/Speed1 = Vector2( 0.1, 0.1 )
shader_param/Speed2 = Vector2( -0.1, 0.1 )
shader_param/Scale1 = Vector2( 0.1, 0.1 )
shader_param/Scale2 = Vector2( 1, 1 )
shader_param/FoamNoiseScale = Vector2( 1.29, 1.87 )
shader_param/FoamNoiseSpeed = Vector2( 0, 0.2 )
shader_param/FoamBias = 0.66
shader_param/Noise1 = SubResource( 3 )
shader_param/Noise2 = SubResource( 5 )
shader_param/FoamNoise = SubResource( 7 )
